package nl.utwente.di.team26.model.Event;

import javax.xml.bind.annotation.XmlRootElement;
import java.io.*;

/**
 * EventMap Value Object.
 * This class is value object representing database table EventMap
 * This class is intented to be used together with associated Dao object.
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/
 * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed
 * under the terms of GNU GPL license. The full text for license is available
 * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is
 * 5 USD or 5 Eur for each database table, you are generating code for.
 * (That includes unlimited amount of iterations with all supported languages
 * for each database table you are paying for.) Send mail to
 * "Tuomo.Lukka@iki.fi" for more information. Thank you!
 */


@XmlRootElement
public class EventMap implements Serializable {

    /**
     * Persistent Instance variables. This data is directly
     * mapped to the columns of database table.
     */
    private int eventId;
    private int mapId;

    /**
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public EventMap () {

    }

    public EventMap (int eventIdIn, int mapIdIn) {
        this.eventId = eventIdIn;
        this.mapId = mapIdIn;
    }


    /**
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getEventId() {
        return this.eventId;
    }
    public void setEventId(int eventIdIn) {
        this.eventId = eventIdIn;
    }

    public int getMapId() {
        return this.mapId;
    }
    public void setMapId(int mapIdIn) {
        this.mapId = mapIdIn;
    }

    /**
     * hasEqualMapping-method will compare two EventMap instances
     * and return true if they contain same values in all persistent instance
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(EventMap valueObject) {

        if (valueObject.getEventId() != this.eventId) {
            return(false);
        }
        return valueObject.getMapId() == this.mapId;
    }



    /**
     * toString will return String object representing the state of this
     * valueObject. This is useful during application development, and
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        return "\nclass EventMap, mapping to table EventMap\n" +
                "Persistent attributes: \n" +
                "eventId = " + this.eventId + "\n" +
                "mapId = " + this.mapId + "\n";
    }


}