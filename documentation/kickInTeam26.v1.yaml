openapi: 3.0.0
info:
  title: Kick In Team 26
  version: '1.0'
  description: |
    This project is related to Module 4, Data & Information, TCS Year1.
    The goal is to deliver a web application with Map Editing and Event management system, where an Event has many Maps, since they may take place in multiple places,
    generate reports from the maps based on objects placed on them, provide a means for adding new events, maps, users, and the entire project to be secure.
    This documentation is for the endpoints that exist in the system.
  x-logo:
    url: 'https://www.kick-in.nl/cache/img/header_theme_picture/uploads/event/img/5e4509fc74503_logogrootmetthema.png'
    altText: KickIn-Logo
servers:
  - url: 'http://localhost:8080/kickInTeam26/rest'
    description: For tesing locally on home computers.
tags:
  - name: events
    description: everything about the events.
  - name: maps
    description: everything about the maps.
  - name: authentication
    description: 'all about that auth, auth.'
x-tagGroups:
  - name: Authentication
    tags:
      - authentication
  - name: General
    tags:
      - events
      - maps
paths:
  /authentication:
    delete:
      tags:
        - authentication
      summary: Sign-Out
      operationId: delete-authentication
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Invalid token passed:
                  value:
                    errorCode: 403
                    errorMessage: InvalidToken
                Logging out without a token:
                  value:
                    errorCode: 400
                    errorMessage: 'You are currently not part of a session, please login before continuing.'
      description: 'Logs You out of the session, which is basically revoking your current token.'
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: The login cookie that you obtained when you loggen in
          required: true
    post:
      tags:
        - authentication
      summary: Sign-In
      operationId: post-authentication
      responses:
        '204':
          description: No Content
          headers:
            Set-Cookie:
              schema:
                type: string
              description: 'The login cookie, which contains the token for future authentication'
              required: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Invalid Crednetials:
                  value:
                    errorCode: 403
                    errorMessage: 'Sorry, your credentials do not Match, please contact your administrator if you have lost your Credentials.'
      description: 'Provide your login credentials here, which will then be checked against the databse to produce a cookie which will attached to the response so that the token generated can be validated for each request and also used accordingly for authorization.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
            examples:
              AdminLogin:
                value:
                  email: admin@gmail.com
                  password: adminpass
        description: The credentials needed for the login.
      parameters: []
  /events:
    get:
      tags:
        - events
      summary: Get all your Events.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              examples:
                Get All Events:
                  value:
                    - date: '2020-01-01'
                      name: Second Event
                      eventId: 8
                      location: On Campus
                      createdBy: admin
                      description: Second Event
                      lastEditedBy: admin
                    - date: '2020-01-01'
                      name: FirstEvent
                      eventId: 9
                      location: Somewhere
                      createdBy: Puru
                      description: FirstEvent
                      lastEditedBy: Puru
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                No Events in the map:
                  value:
                    errorCode: '404'
                    errorMessage: Either this object does not exist in the database or the database is emepty
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
      operationId: get-events
      description: Returns all the elements in the Database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
          required: true
    post:
      tags:
        - events
      summary: Add a new Event.
      operationId: post-events
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
                exclusiveMinimum: false
                example: 0
              examples:
                First Event:
                  value: 1
        '500':
          description: Internal Server Error
      description: Adds a new Event to the Database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              Add a New Event 1:
                value:
                  name: FirstEvent
                  description: FirstEvent
                  location: Somewhere
                  date: '2020-01-01'
        description: The event details.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
    delete:
      tags:
        - events
      summary: Delete all the Events.
      operationId: delete-events
      responses:
        '204':
          description: No Content
        '500':
          description: Internal Server Error
      description: Deleted all the events in the Database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
  '/event/{eventId}':
    get:
      tags:
        - events
      summary: Get an Event using eventId.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              examples:
                Event1:
                  value:
                    date: '2020-01-01'
                    maps:
                      - name: m1
                        createdBy: admin
                        description: m1
                        lastEditedBy: admin
                      - name: m2
                        createdBy: admin
                        description: m2
                        lastEditedBy: admin
                    name: First Event
                    eventId: 1
                    location: On Campus
                    createdBy: admin
                    description: First Event
                    lastEditedBy: admin
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: 'No Result Returned, no Event of ID: 7 in the Database'
        '500':
          description: Internal Server Error
      operationId: get-event
      description: Get a specific event from the Database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
    put:
      tags:
        - events
      summary: Update an existing Event
      operationId: put-event
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: 'Object could not be saved! (PrimaryKey not found)'
        '500':
          description: Internal Server Error
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: 'ERROR: insert or update on table events'
      description: Update an existing event with new Data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              Updated Event:
                value:
                  eventId: 1
                  name: FirstMap
                  description: FirstMap-Edited
                  location: Somewhere
                  date: '2020-01-02'
        description: 'The new data, for the event.'
    delete:
      tags:
        - events
      summary: Delete an Event.
      operationId: delete-event
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: 'Object could not be deleted! (PrimaryKey not found)'
        '500':
          description: Internal Server Error
      description: Deletes a specific event from the database.
    parameters:
      - schema:
          type: integer
        name: eventId
        in: path
        required: true
        description: the event to modify
  /maps:
    get:
      summary: Get all the Maps.
      tags:
        - maps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
              examples:
                All Maps:
                  value:
                    - name: m1
                      mapId: 1
                      createdBy: admin
                      description: m1
                      lastEditedBy: admin
                    - name: m2
                      mapId: 2
                      createdBy: admin
                      description: m2
                      lastEditedBy: admin
                    - name: Third
                      mapId: 3
                      createdBy: Puru
                      description: Third
                      lastEditedBy: Puru
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-maps
      description: Gets all the maps stored in the database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
    post:
      tags:
        - maps
      summary: Add a new Map to the database.
      operationId: post-maps
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: integer
              examples:
                mapId Returned:
                  value: 1
        '500':
          description: Internal Server Error
      description: Adds a new Map to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
            examples:
              First Map:
                value:
                  name: FirstMap
                  description: FirstMap
        description: The new Map to be added to the database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
          required: true
    delete:
      tags:
        - maps
      summary: Delete All the Maps.
      operationId: delete-maps
      responses:
        '204':
          description: No Content
        '500':
          description: Internal Server Error
      description: deletes all the maps to the database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
          required: true
  '/map/{mapId}':
    parameters:
      - schema:
          type: integer
        name: mapId
        in: path
        required: true
        description: The mapId of the object to be modified as in the database.
    get:
      tags:
        - maps
      summary: Get a single Map using mapId.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
              examples:
                Map 1:
                  value:
                    name: FirstMap
                    mapId: 1
                    report:
                      - name: ' Leaf blower'
                        count: 1
                      - name: ' Mobile fence (with black tarp)'
                        count: 3
                    createdBy: admin
                    description: FirstMap- I have now been edited
                    lastEditedBy: Puru
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                No Map:
                  value: 'No Result Returned, no Map of ID: 89 in the Database'
        '500':
          description: Internal Server Error
      operationId: get-map-mapId
      description: Get the particular map in the database.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
          required: true
    post:
      tags:
        - maps
      summary: Update an existing map.
      operationId: post-map-mapId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Error Example:
                  value:
                    errorCode: 400
                    errorMessage: 'Object could not be saved! (PrimaryKey not found)'
        '500':
          description: Internal Server Error
      description: Update the map details.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
            examples:
              UpdatedInfo for Map1:
                value:
                  mapId: 1
                  name: FirstMap
                  description: FirstMap- I have now been edited
        description: The new map info.
      parameters:
        - schema:
            type: string
          in: header
          name: Cookie
          description: Your login cookie
          required: true
    delete:
      tags:
        - maps
      summary: Delete an exisintg map.
      operationId: delete-map-mapId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                Error Deleting:
                  value: 'Object could not be saved! (PrimaryKey not found)'
        '500':
          description: Internal Server Error
      description: Delete the specific map from the database.
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        example-1: {}
      properties:
        userId:
          type: integer
        email:
          type: string
        password:
          type: string
        nickname:
          type: string
        clearancelevel:
          type: integer
      required:
        - email
        - password
        - nickname
        - clearancelevel
    Map:
      title: Map
      type: object
      properties:
        mapId:
          type: integer
        name:
          type: string
        description:
          type: string
        createdBy:
          type: integer
        lastEditedBy:
          type: integer
      required:
        - name
    Event:
      title: Event
      type: object
      properties:
        eventId:
          type: string
        name:
          type: string
        description:
          type: string
        date:
          type: string
        createdBy:
          type: string
        lastEditedBy:
          type: string
      required:
        - name
    EventMap:
      title: EventMap
      type: object
      properties:
        eventId:
          type: integer
        mapId:
          type: integer
      required:
        - eventId
        - mapId
    MapObject:
      title: MapObject
      type: object
      properties:
        objectId:
          type: integer
        mapId:
          type: integer
        resourceId:
          type: integer
        latLangs:
          type: string
      required:
        - mapId
        - resourceId
        - latLangs
    Credentials:
      title: Crednetials
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Session:
      title: Session
      type: object
      properties:
        userId:
          type: integer
        token:
          type: string
      required:
        - userId
        - token
    Drawing:
      title: Drawing
      type: object
      properties:
        resourceId:
          type: string
        name:
          type: string
        decription:
          type: string
        url:
          type: string
      required:
        - name
    Material:
      title: Material
      type: object
      properties:
        resourceId:
          type: integer
        name:
          type: string
        description:
          type: string
        image:
          type: string
      required:
        - name
    ErrorMessage:
      title: ErrorMessage
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
      required:
        - errorCode
        - errorMessage
  securitySchemes: {}
