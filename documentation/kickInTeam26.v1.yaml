openapi: 3.0.0
info:
  title: kickInTeam26
  version: '1.0'
  description: 'Event, Map editor for idb_kickIn'
servers:
  - url: 'http://localhost:8080/kickInTeam26/rest/'
paths:
  '/event/{eventId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              examples:
                example-1:
                  value:
                    eventId: 1
                    name: FirstMap
                    description: FirstMap-Edited
                    location: Somewhere
                    createdBy: Someone
                    lastEditedBy: Not No One
      operationId: get-event-eventId
      description: 'gets event details for a specific event, identified by the eventId.'
    delete:
      summary: ''
      operationId: delete-event-eventId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success: {}
                Failure: {}
      description: Deletes the event with the eventId.
    put:
      summary: ''
      operationId: put-event-eventId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success: {}
                Failure: {}
      description: updates the event with the eventId.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
            examples:
              example-1:
                value:
                  eventId: 1
                  name: FirstMap
                  description: FirstMap-Edited
                  location: Somewhere
                  createdBy: Someone
                  lastEditedBy: Not No One
  /events:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
              examples:
                example-1:
                  value:
                    - eventId: 1
                      name: FirstMap
                      description: FirstMap-Edited
                      location: Somewhere
                      createdBy: Someone
                      lastEditedBy: Not No One
                    - eventId: 2
                      name: SecondEvent
                      description: SecondEvent
                      location: Somewhere
                      createdBy: Someone
                      lastEditedBy: No One
      operationId: get-events
      description: Gets all the events from the database.
    post:
      summary: ''
      operationId: post-events
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success:
                  value: Success
                Failure:
                  value: Failure
      description: Adds a new event to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
            examples:
              example-1:
                value:
                  name: SecondEvent
                  description: SecondEvent
                  location: Somewhere
                  createdBy: Someone
                  lastEditedBy: No One
    delete:
      summary: ''
      operationId: delete-events
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success:
                  value: Sucess
                Failure:
                  value: Failure
      description: Deletes all the events from the database.
  /eventMap:
    delete:
      summary: ''
      operationId: delete-eventMap
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success:
                  value: Success
                Failure:
                  value: Failure
      parameters: []
      description: deletes all the relations between event and map
    post:
      summary: ''
      operationId: post-eventMap
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: Adds a new relation inbetween map and event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventMap'
            examples:
              example-1:
                value:
                  eventId: 1
                  mapId: 1
              example-2:
                value:
                  eventId: 1
                  mapId: 2
              example-3:
                value:
                  eventId: 2
                  mapId: 1
  '/eventMap/event/{eventId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maps'
      operationId: get-eventMap-event-eventId
      description: gets all the maps for the specific event
    delete:
      summary: ''
      operationId: delete-eventMap-event-eventId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: clears all relations for the specific eventId
  '/eventMap/map/{mapId}':
    parameters:
      - schema:
          type: string
        name: mapId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
      operationId: get-eventMap-map-mapId
      description: Gets all the events the map is part of.
  '/eventMap/{mapId}/{eventId}':
    parameters:
      - schema:
          type: string
        name: mapId
        in: path
        required: true
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-eventMap-mapId-eventId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: deletes a specific map for the matching eventId-map-Id.
  '/map/{mapId}':
    parameters:
      - schema:
          type: string
        name: mapId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maps'
      operationId: get-map-mapId
      description: Gets the map details for a specific map.
    put:
      summary: ''
      operationId: put-map-mapId
      responses:
        '200':
          description: OK
      description: Updates the map details for a specific map.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Maps'
    delete:
      summary: ''
      operationId: delete-map-mapId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: deletes the map.
  /maps:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maps'
      operationId: get-maps
      description: gets all the maps.
    post:
      summary: ''
      operationId: post-maps
      responses:
        '200':
          description: OK
      description: adds a new map to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Maps'
    delete:
      summary: ''
      operationId: delete-maps
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: deletes all the maps.
  '/object/{objectId}':
    parameters:
      - schema:
          type: string
        name: objectId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapObjects'
      operationId: get-object-objectId
      description: 'gets a specific object placed on the map, using objectId.'
    put:
      summary: ''
      operationId: put-object-objectId
      responses:
        '200':
          description: OK
      description: updates the objects latLangs only.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapObjects'
    delete:
      summary: ''
      operationId: delete-object-objectId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: 'deletes the object from the database, only one map is affected.'
  /objects:
    post:
      summary: ''
      operationId: post-objects
      responses:
        '200':
          description: OK
      description: adds a new object to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapObjects'
    delete:
      summary: ''
      operationId: delete-objects
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: 'deletes all the objects, so effectively all maps are cleared.'
  '/objects/{mapId}':
    parameters:
      - schema:
          type: string
        name: mapId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapObjects'
      operationId: get-objects-mapId
      description: gets all the objects for a specific map
    delete:
      summary: ''
      operationId: delete-objects-mapId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: clears the map of all objects.
  '/drawing/{drawingId}':
    parameters:
      - schema:
          type: string
        name: drawingId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drawing'
      operationId: get-drawing-drawingId
      description: Retrieves the drawing using the drawing Id from the Database.
    delete:
      summary: ''
      operationId: delete-drawing-drawingId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success:
                  value: Success
                Failure:
                  value: Failure
      description: 'deletes the drawing from the database, using the drawingId.'
    put:
      summary: ''
      operationId: put-drawing-drawingId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Success:
                  value: Success
                Failure:
                  value: Failure
      description: 'Updates the drawing, using the drawingId in the database.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drawing'
            examples:
              example-1:
                value:
                  resourceId: 3
                  name: materpiece
                  description: 'cost: 1000000 eur'
                  image: picasso
  /drawings:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drawing'
              examples:
                example-1:
                  value:
                    - resourceId: 3
                      name: materpiece
                      description: 'cost: 1000000 eur'
                      image: picasso
      operationId: get-drawings
      description: Gets all the drawings from the database.
    post:
      summary: ''
      operationId: post-drawings
      responses:
        '200':
          description: OK
      description: Adds a new drawing to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drawing'
            examples:
              example-1:
                value:
                  name: materpiece
                  description: 'cost: 1 eur'
                  image: picasso
  '/materials/{materialId}':
    parameters:
      - schema:
          type: string
        name: materialId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Materials'
      operationId: get-materials-materialId
      description: gets a particular material detail.
    delete:
      summary: ''
      operationId: delete-materials-materialId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: deletes the material.
    put:
      summary: ''
      operationId: put-materials-materialId
      responses:
        '200':
          description: OK
      description: updates the specific material details.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Materials'
        description: ''
  /materials:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Materials'
      operationId: get-materials
      description: gets all the materials
    post:
      summary: ''
      operationId: post-materials
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: adds a new material
    delete:
      summary: ''
      operationId: delete-materials
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: deletes all the materials.
  /resources:
    delete:
      summary: ''
      operationId: delete-resources
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: 'deletes all the resouces, materials and drawing.'
  '/resource/{resourceId}':
    parameters:
      - schema:
          type: string
        name: resourceId
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-resource-resourceId
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
      description: 'deletes a particular resource, using the resourceId.'
components:
  schemas:
    Events:
      title: Events
      type: object
      properties:
        eventId:
          type: integer
        name:
          type: string
        description:
          type: string
        location:
          type: string
        createdBy:
          type: string
        lastEditedBy:
          type: string
      description: 'This is the event model. It stores the variable like Name, Description, Location, Created By, Last Edited By.'
      x-examples:
        'ex-1:FirstEvent:POST':
          name: FirstMap
          description: FirstMap
          location: Somewhere
          createdBy: Someone
          lastEditedBy: No One
        'ex-1:FirstEventEdited:PUT':
          eventId: 1
          name: FirstMap
          description: FirstMap-Edited
          location: Somewhere
          createdBy: Someone
          lastEditedBy: Not No One
        'ex-2:SecondEvent:POST':
          name: SecondEvent
          description: SecondEvent
          location: Somewhere
          createdBy: Someone
          lastEditedBy: No One
    Maps:
      title: Maps
      type: object
      properties:
        mapId:
          type: integer
        name:
          type: string
        description:
          type: string
        createdBy:
          type: string
        lastEditedBy:
          type: string
      x-examples:
        'ex-1:Map:POST':
          name: FirstMap
          description: FirstMap
          createdBy: Someone
          lastEditedBy: No One
        'ex-2:Map:POST':
          name: SecondMap
          description: SecondMap
          createdBy: Someone Else
          lastEditedBy: No One
        'ex-1:Map-Edited:PUT':
          mapId: 1
          name: FirstMap
          description: FirstMap- I have now been edited
          createdBy: Someone
          lastEditedBy: Not-No One
    TypeOfResource:
      title: TypeOfResource
      type: object
      properties:
        resourceId:
          type: integer
        name:
          type: string
        description:
          type: string
      x-examples: {}
    EventMap:
      title: EventMap
      type: object
      properties:
        eventId:
          type: integer
        mapId:
          type: integer
      x-examples:
        'example-1:POST':
          eventId: 1
          mapId: 1
        'example-2:POST':
          eventId: 1
          mapId: 2
        'example-3:POST':
          eventId: 2
          mapId: 1
    Drawing:
      title: Drawing
      type: object
      properties:
        resourceId:
          type: integer
        image:
          type: string
      x-examples:
        'example-1:POST':
          name: materpiece
          description: 'cost: 1 eur'
          image: picasso
        'example-1:PUT':
          resourceId: 3
          name: materpiece
          description: 'cost: 1000000 eur'
          image: picasso
    Materials:
      title: Materials
      type: object
      properties:
        resourceId:
          type: integer
        image:
          type: string
      x-examples:
        'example-1:POST':
          name: Fences
          description: 1m High
          image: image of a fence
        'example-2:POST':
          name: Tent
          description: '5m High, 50m circumference'
          image: image of a tent
        'example-2:Edited:PUT':
          resourceId: 2
          name: Tent
          description: '10m High, 50m circumference'
          image: image of a tent
    MapObjects:
      title: MapObjects
      type: object
      properties:
        objectId:
          type: integer
        mapId:
          type: integer
        resourceId:
          type: integer
        latLangs:
          type: string
      x-examples:
        'example-1:POST':
          mapId: 1
          resourceId: 1
          latLangs: '{5,15,-5,15}'
        'example-1:Edited:PUT':
          objectId: 1
          mapId: 1
          resourceId: 1
          latLangs: '{10,20,0,20}'
